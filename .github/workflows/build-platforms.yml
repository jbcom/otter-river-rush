name: Build All Platforms

# Unified workflow that builds web once and reuses it for desktop and mobile
# This optimizes the build process by avoiding redundant web builds

on:
  workflow_run:
    workflows: ["Integration Tests"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0) or "snapshot"'
        required: false
        default: 'snapshot'
        type: string
      platforms:
        description: 'Platforms to build (comma-separated: web,desktop,mobile,all)'
        required: true
        type: choice
        options:
          - all
          - web
          - desktop
          - mobile
          - web,desktop
          - web,mobile
        default: 'all'
      generate_assets:
        description: 'Generate fresh assets with AI'
        type: boolean
        default: false

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: build-platforms-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Step 1: Build web once - this is the foundation for all platforms
  # NOTE: Web build is ALWAYS needed because:
  #   - Desktop (Electron) wraps the web build
  #   - Mobile (Capacitor) wraps the web build
  #   - Web deployment uses the web build
  # Therefore, we build web for ALL workflow_dispatch triggers and workflow_run events
  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event.workflow_run.conclusion == 'success' && 
       github.event.workflow_run.head_branch == 'main')
    outputs:
      build-sha: ${{ github.sha }}
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate fresh assets (if requested)
        if: github.event_name == 'workflow_dispatch' && inputs.generate_assets
        run: |
          echo "🎨 Generating fresh game content..."
          npm run generate-content || echo "⚠️  Content generation failed"
          npm run generate-sprites || echo "⚠️  Sprite generation failed"
          npm run generate-hud || echo "⚠️  HUD generation failed"
          npm run generate-ui-icons || echo "⚠️  UI icons failed"
          npm run asset-pipeline || echo "⚠️  Asset pipeline failed"
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        continue-on-error: true
      
      - name: Build web
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Report bundle size
        run: |
          BUNDLE_SIZE=$(du -sb dist | cut -f1)
          BUNDLE_MB=$(echo "scale=2; $BUNDLE_SIZE / 1024 / 1024" | bc)
          echo "Bundle size: ${BUNDLE_MB}MB"
          echo "### 📦 Web Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "Bundle size: ${BUNDLE_MB}MB" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload web build artifact
        uses: actions/upload-artifact@v5
        with:
          name: web-build-${{ github.sha }}
          path: dist/
          retention-days: 7
  
  # Step 2: Deploy to GitHub Pages (optional, only for web builds)
  deploy-web:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-web
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.platforms == 'all' || inputs.platforms == 'web' || contains(inputs.platforms, 'web'))) ||
      github.event_name == 'workflow_run'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Download web build
        uses: actions/download-artifact@v6
        with:
          name: web-build-${{ github.sha }}
          path: dist/
      
      - name: Setup Pages
        uses: actions/configure-pages@v5
      
      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v4
        with:
          path: dist/
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Step 3: Build desktop platforms (reuses web build)
  build-desktop:
    name: Build Desktop (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: build-web
    if: |
      github.event_name == 'workflow_dispatch' &&
      (inputs.platforms == 'all' || inputs.platforms == 'desktop' || contains(inputs.platforms, 'desktop'))
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: macos
          - os: windows-latest
            platform: windows
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download web build
        uses: actions/download-artifact@v6
        with:
          name: web-build-${{ github.sha }}
          path: dist/
      
      - name: Build Electron app (reusing web build)
        run: npm run electron:build
      
      - name: Rename builds
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version || 'snapshot' }}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          cd dist-electron
          
          # Rename all output files
          for file in *; do
            if [ -f "$file" ]; then
              ext="${file##*.}"
              base=$(basename "$file" ".$ext")
              mv "$file" "otter-river-rush-${VERSION}-${TIMESTAMP}-${{ matrix.platform }}.$ext" 2>/dev/null || true
            fi
          done
      
      - name: Upload Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v5
        with:
          name: desktop-linux-${{ github.sha }}
          path: |
            dist-electron/*.AppImage
            dist-electron/*.deb
          retention-days: 30
      
      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v5
        with:
          name: desktop-macos-${{ github.sha }}
          path: |
            dist-electron/*.dmg
            dist-electron/*.zip
          retention-days: 30
      
      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v5
        with:
          name: desktop-windows-${{ github.sha }}
          path: dist-electron/*.exe
          retention-days: 30
      
      - name: Upload to release (if version tag)
        if: github.event.inputs.version && startsWith(github.event.inputs.version, 'v')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          files: dist-electron/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Step 4: Build mobile platforms (reuses web build)
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: build-web
    if: |
      github.event_name == 'workflow_dispatch' &&
      (inputs.platforms == 'all' || inputs.platforms == 'mobile' || contains(inputs.platforms, 'mobile'))
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download web build
        uses: actions/download-artifact@v6
        with:
          name: web-build-${{ github.sha }}
          path: dist/
      
      - name: Sync Capacitor (reusing web build)
        run: npx cap sync android
      
      - name: Setup JDK 17
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Build APK
        run: |
          cd android
          chmod +x ./gradlew
          ./gradlew assembleRelease
      
      - name: Rename APK
        run: |
          VERSION="${{ github.event.inputs.version || 'snapshot' }}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          mv android/app/build/outputs/apk/release/app-release-unsigned.apk \
             android/app/build/outputs/apk/release/otter-river-rush-${VERSION}-${TIMESTAMP}.apk
      
      - name: Upload APK artifact
        uses: actions/upload-artifact@v5
        with:
          name: android-apk-${{ github.sha }}
          path: android/app/build/outputs/apk/release/*.apk
          retention-days: 30
      
      - name: Upload to release (if version tag)
        if: github.event.inputs.version && startsWith(github.event.inputs.version, 'v')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          files: android/app/build/outputs/apk/release/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Step 5: E2E tests on deployed web
  e2e-web:
    name: E2E Tests (Deployed Web)
    runs-on: ubuntu-latest
    needs: deploy-web
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.platforms == 'all' || inputs.platforms == 'web' || contains(inputs.platforms, 'web'))) ||
      github.event_name == 'workflow_run'
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install --with-deps
      
      - name: Get deployment URL
        id: get-url
        run: |
          # Get the GitHub Pages URL
          REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
          PAGES_URL="https://${{ github.repository_owner }}.github.io/${REPO_NAME}/"
          echo "PAGES_URL=${PAGES_URL}" >> $GITHUB_OUTPUT
          echo "Testing deployed URL: ${PAGES_URL}"
      
      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          curl -f "${{ steps.get-url.outputs.PAGES_URL }}" || sleep 30
      
      - name: Run E2E tests against DEPLOYED site
        run: npm run test:e2e
        env:
          BASE_URL: ${{ steps.get-url.outputs.PAGES_URL }}
      
      - name: Upload E2E report
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: e2e-web-report-${{ github.sha }}
          path: playwright-report/
          retention-days: 7

  # Summary job
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-web]
    if: always() && needs.build-web.result != 'cancelled'
    steps:
      - name: Generate summary
        run: |
          echo "## 🎮 Otter River Rush - Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Strategy" >> $GITHUB_STEP_SUMMARY
          echo "✅ Web built once and reused for all platforms" >> $GITHUB_STEP_SUMMARY
          echo "✅ Optimized CI pipeline - no redundant builds" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts Available" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 Web: Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
          echo "- 🖥️  Desktop: Linux, macOS, Windows builds" >> $GITHUB_STEP_SUMMARY
          echo "- 📱 Mobile: Android APK" >> $GITHUB_STEP_SUMMARY
